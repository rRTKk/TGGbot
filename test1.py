import config
import logging
from random import randint
import aiogram.utils.markdown as fmt
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

# log
logging.basicConfig(level=logging.INFO)

# init
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã')

greet_kb = ReplyKeyboardMarkup()
greet_kb.add(button_hi)
# prices
PRICE = types.LabeledPrice(label="–ö—É—Ä—Å –Ø–Ω–¥–µ–∫—Å –ª–∏—Ü–µ–π Unity", amount=500 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

'''
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=kb.greet_kb)'''


@dp.message_handler(commands="random")
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="random_value"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)


@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer(str(randint(1, 10)))


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ö—É–ø–∏—Ç—å –∫—É—Ä—Å—ã", "–ó–∞–º–µ—Ç–∫–∏", "GPT", "–ù–æ–≤–æ—Å—Ç–∏"]
    keyboard.add(*buttons)
    await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "GPT")
async def without_puree(message: types.Message):
    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!")
    '''
    await bot.send_invoice(message.chat.id,
                           title="–ü—Ä–æ–¥–∞–∂–∞ IT –∫—É—Ä—Å–æ–≤ –ø–æ –ø—Ä–∏—è—Ç–Ω—ã–º —Ü–µ–Ω–∞–º",
                           description=f"–ö–∞—Ç–∞–ª–æ–≥ \n –ö—É—Ä—Å –Ø–Ω–¥–µ–∫—Å –ª–∏—Ü–µ–π Unity: /UnityBuy \n"
                                       f"–ö—É—Ä—Å –ø–∏—Ç–æ–Ω: /PythonBuy \n Rest api –∫—É—Ä—Å: /RestBuy \n"
                                       f"–ö—É—Ä—Å After Effects: /AfterBuy",
                           photo_url="https://obshestvo.org/wp-content/uploads/2020/08/yl.jpg",
                           photo_width=600,
                           photo_height=450,
                           photo_size=600,
                           is_flexible=False)
    await bot.send_message(message.chat.id, f"–ö–∞—Ç–∞–ª–æ–≥ \n –ö—É—Ä—Å –Ø–Ω–¥–µ–∫—Å –ª–∏—Ü–µ–π Unity: /buy")
    '''
    '''
    @bot.message_handler(commands=['start'])
    def start(msg):
        mess = f'–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!'
        bot.send_message(msg.chat.id, mess, parse_mode='html')
        bot.send_message(msg.chat.id, f'–ß–∏—Ç–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ /NewsStart', parse_mode='html')
        bot.send_message(msg.chat.id, f'–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ /YourNotes', parse_mode='html')
        bot.send_message(msg.chat.id, f'–°–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ /Tips', parse_mode='html')'''


@dp.message_handler(commands=['UnityBuy'])
async def UnityBuy(message: types.Message):
    if config.PAYTOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–ö—É—Ä—Å –Ø–Ω–¥–µ–∫—Å –ª–∏—Ü–µ–π Unity")

    await bot.send_invoice(message.chat.id,
                           title="–ö—É—Ä—Å –Ø–Ω–¥–µ–∫—Å –ª–∏—Ü–µ–π Unity",
                           description="–°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª + –≤–∏–¥–µ–æ-—É—á–µ–±–Ω–∏–∫",
                           provider_token=config.PAYTOKEN,
                           currency="rub",
                           photo_url="https://obshestvo.org/wp-content/uploads/2020/08/yl.jpg",
                           photo_width=600,
                           photo_height=450,
                           photo_size=600,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="Yandex_Unity",
                           payload="Yandex_Unity")


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

    # successful payment


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! "
                           f"–°—Å—ã–ª–∫–∞: https://disk.yandex.ru/d/g721TvTNaXivig \n –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É! \n"
                           f"–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω \start")

    # run long-polling


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)
